package boolfuck

import "testing"

const (
	helloWorld = ";;;+;+;;+;+;\n+;+;+;+;;+;;+;\n;;+;;+;+;;+;\n;;+;;+;+;;+;\n+;;;;+;+;;+;\n;;+;;+;+;+;;\n;;;;;+;+;;\n+;;;+;+;;;+;\n+;;;;+;+;;+;\n;+;+;;+;;;+;\n;;+;;+;+;;+;\n;;+;+;;+;;+;\n+;+;;;;+;+;;\n;+;+;+;"
	multiply
	catFF      = ">,>,>,>,>,>,>,>,<<<<<<<[>]+<[+<]>>>>>>>>>[+]+<<<<<<<<+[>+]<[<]>>>>>>>>>[+<<<<<<<<[>]+<[+<]>>>>>>>>>+<<<<<<<<+[>+]<[<]>>>>>>>>>[+]<<<<<<<<;>;>;>;>;>;>;>;<<<<<<<,>,>,>,>,>,>,>,<<<<<<<[>]+<[+<]>>>>>>>>>[+]+<<<<<<<<+[>+]<[<]>>>>>>>>>]<[+<]"
	cat00      = ">,>,>,>,>,>,>,>,>+<<<<<<<<+[>+]<[<]>>>>>>>>>[+<<<<<<<<[>]+<[+<]>;>;>;>;>;>;>;>;>+<<<<<<<<+[>+]<[<]>>>>>>>>>[+<<<<<<<<[>]+<[+<]>>>>>>>>>+<<<<<<<<+[>+]<[<]>>>>>>>>>[+]+<<<<<<<<+[>+]<[<]>>>>>>>>>]<[+<]>,>,>,>,>,>,>,>,>+<<<<<<<<+[>+]<[<]>>>>>>>>>]<[+<]"
	test
)

type input struct {
	code  string
	input string
}

type testCase struct {
	in  input
	out string
	msg string
}

var exampleTests = []testCase{
	{
		input{helloWorld, ""},
		"Hello, world!\n",
		"Your interpreter did not work with the code example provided on the official website",
	},
	{
		input{catFF, "Codewars\xff"},
		"Codewars",
		"should echo until byte(255) encountered",
	},
	{
		input{cat00, "Codewars\x00"},
		"Codewars",
		"should echo until byte(0) encountered",
	},
	{
		input{multiply, "\x08\x09"},
		"\x48",
		"should multiply two numbers. byte(8)*byte(9)=byte(72)",
	},
	{
		input{test1, "\r\f"},
		"\x9c",
		"byte(13)*byte(12)=byte(156)",
	},
}

func Test(t *testing.T) {
	for _, ts := range exampleTests {
		ans := Boolfuck(ts.in.code, ts.in.input)
		if ans != ts.out {
			t.Errorf("%s. Expected: %x, but got: %x", ts.msg, ts.out, ans)
		}
	}
}
